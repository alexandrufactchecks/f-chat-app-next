====================================================
FACTCHECK CHAT APPLICATION DOCUMENTATION
====================================================

=== PROJECT OVERVIEW ===

This is a modern, responsive chat application built with Next.js and React, 
designed to provide a user-friendly interface for factchecking services. 
The application features an animated UI, chat responses powered by DeepSeek AI,
and a clean, interactive user experience.

=== PROJECT STRUCTURE ===

/ (root)
├── .env.local               # Environment variables (DeepSeek API key)
├── .git/                    # Git version control
├── .gitignore               # Git ignore rules
├── node_modules/            # Third-party dependencies
├── next.config.ts           # Next.js configuration
├── package.json             # Project dependencies and scripts
├── package-lock.json        # Lock file for dependencies
├── postcss.config.mjs       # PostCSS configuration
├── public/                  # Static assets
├── README.md                # Project readme
├── DOCUMENTATION.txt        # This documentation file
├── src/                     # Source code
│   ├── app/                 # Next.js App Router
│   │   ├── api/             # API routes
│   │   │   └── deepseek/    # DeepSeek API integration
│   │   │       └── route.ts # API endpoint for DeepSeek
│   │   ├── globals.css      # Global styles
│   │   ├── layout.tsx       # Root layout component
│   │   └── page.tsx         # Home page component
│   └── components/          # React components
│       ├── chat/            # Chat-related components
│       │   ├── AnimatedBackground.module.css
│       │   ├── AnimatedBackground.tsx
│       │   ├── Chat.module.css
│       │   ├── Chat.tsx     # Main chat component
│       │   ├── ChatHeader.module.css
│       │   ├── ChatHeader.tsx
│       │   ├── ChatInput.module.css
│       │   ├── ChatInput.tsx
│       │   ├── ChatMessages.module.css
│       │   └── ChatMessages.tsx
│       ├── loading/         # Loading components
│       ├── theme/           # Theme components
│       └── ClientApp.tsx    # Client-side app wrapper
└── tsconfig.json            # TypeScript configuration

=== KEY COMPONENTS ===

1. Chat.tsx
   - Main chat container component
   - Manages state for messages
   - Handles sending messages and receiving responses
   - Integrates with DeepSeek API through the backend endpoint

2. ChatMessages.tsx
   - Displays the message history
   - Handles message rendering and styling
   - Shows loading animation while waiting for AI response

3. ChatInput.tsx
   - User input component
   - Handles text submission
   - Provides user feedback
   - Disables input during API processing

4. AnimatedBackground.tsx
   - Provides visual aesthetics
   - Creates dynamic background animations

5. ClientApp.tsx
   - Client-side app wrapper 
   - Manages client-side rendering

6. API Route (src/app/api/deepseek/route.ts)
   - Server-side API endpoint that interfaces with DeepSeek
   - Securely handles API key
   - Processes user messages and returns AI responses

=== FEATURES ===

1. Responsive Design
   - Adapts to various screen sizes
   - Mobile-friendly interface

2. Modern UI
   - Animated background
   - Clean, intuitive chat interface
   - Visual feedback for user actions
   - Loading animations during API calls

3. DeepSeek AI Integration
   - Real-time AI responses
   - Secure API key handling
   - Error handling for API failures

4. TypeScript Integration
   - Type-safe development
   - Enhanced code reliability

=== TECHNOLOGIES USED ===

- Next.js 15.2.1: React framework for production
- React 19: UI library
- TypeScript: Type-safe JavaScript
- TailwindCSS: Utility-first CSS framework
- CSS Modules: Component-scoped styling
- UUID: Unique ID generation
- DeepSeek API: AI-powered conversation
- ReactMarkdown: Markdown rendering for formatted responses

=== DEEPSEEK API INTEGRATION ===

The application integrates with DeepSeek AI through a secure server-side API route:

1. API Configuration
   - API key stored in .env.local (NEXT_PUBLIC_DEEPSEEK_API_KEY)
   - Server-side endpoint at /api/deepseek

2. Message Flow
   - User inputs message in ChatInput component
   - Message is sent to backend API route
   - Backend securely calls DeepSeek API
   - Response is returned and displayed in the chat

3. Error Handling
   - API errors are caught and displayed as error messages
   - Loading states provide visual feedback during API calls
   - Network issues are gracefully handled

=== SETUP INSTRUCTIONS ===

1. Environment Setup
   - Ensure Node.js is installed (v18+ recommended)
   - Configure .env.local with DeepSeek API key:
     NEXT_PUBLIC_DEEPSEEK_API_KEY=your-api-key

2. Installation
   - Run `npm install` to install dependencies

3. Development
   - Run `npm run dev` to start the development server
   - Access the application at http://localhost:3000

=== UI AND LAYOUT ENHANCEMENTS ===

Recent improvements to the UI and layout have been implemented to enhance user experience:

1. Responsive Design Enhancements
   - Improved adaptive layout for diverse screen sizes (desktop, tablet, mobile)
   - Added specific breakpoints for large screens (1024px+), tablets (768-1023px), 
     mobile (480-767px), and small mobile devices (<480px)
   - Implemented iOS-specific fixes for keyboard behavior and notch compatibility
   - Added safe-area-inset support for modern iOS devices with notches

2. Visual Improvements
   - Enhanced message bubbles with subtle hover effects
   - Improved shadow effects for depth and visual hierarchy
   - Added backdrop blur effects for modern glass-like UI
   - Refined spacing and padding for better readability
   - Optimized animations for smoother transitions

3. Chat Components Optimization
   - ChatInput: Improved focus states and visual feedback
   - ChatMessages: Enhanced message container sizing and alignment
   - ChatHeader: Better positioning and responsiveness
   - AnimatedBackground: Performance optimizations

4. Accessibility Improvements
   - Increased touch target sizes on mobile
   - Improved color contrast for better readability
   - Enhanced keyboard navigation support

These improvements ensure a consistent and polished user experience across all devices,
with special attention to mobile responsiveness and modern design aesthetics.

=== RESPONSE FORMATTING ENHANCEMENTS ===

Recent improvements have been made to enhance the readability of AI responses:

1. Markdown Rendering Support
   - Added ReactMarkdown for rich text formatting
   - Implemented styled components for various markdown elements
   - Enhanced message bubbles to support structured content

2. Text Formatting Improvements
   - Auto-formatting of headings for better hierarchy
   - Proper spacing between paragraphs
   - Styled lists (ordered and unordered)
   - Formatted code blocks with syntax highlighting
   - Blockquote styling for quoted content
   - Automatic bolding of important information

3. Pre-processing of AI Responses
   - Server-side processing of DeepSeek API responses
   - Conversion of plain text patterns to markdown
   - Improved readability of lists and structured content
   - Enhanced spacing and formatting consistency

4. Responsive Design for Formatted Content
   - Adjusted heading sizes for different screen sizes
   - Optimized code blocks for mobile viewing
   - Responsive list styling and indentation
   - Touch-friendly spacing for mobile interaction

5. Fact-Checking Specific Enhancements
   - Visual indicators for factual statements with emojis (📝 FACT, 🔎 SOURCE, etc.)
   - Color-coded sections for different types of content (facts, sources, conclusions)
   - Highlighted callout boxes for key facts
   - Visual emphasis for verified/unverified statements
   - Special formatting for dates, percentages, and metrics
   - Structured organization with section dividers

These improvements significantly enhance the readability of AI responses,
particularly for complex information, technical explanations, and
structured content like lists and code examples. The fact-checking specific
enhancements create a more trustworthy presentation of information with clear
visual differentiation between facts, sources, evidence, and conclusions.

=== NEXT STEPS ===

1. Enhance DeepSeek API integration with conversation history
2. Add user authentication
3. Implement message persistence with database
4. Add additional UI features like message reactions
5. Implement typing indicators and read receipts

====================================================