====================================================
FACTCHECKS.EU CHAT APPLICATION DOCUMENTATION
====================================================

=== PROJECT OVERVIEW ===

This is a modern, responsive chat application built with Next.js and React, 
designed to provide a user-friendly interface for factchecking services. 
The application features an animated UI, chat responses powered by DeepSeek AI,
and a clean, interactive user experience.

=== PROJECT STRUCTURE ===

/ (root)
├── .env.local               # Environment variables (DeepSeek API key)
├── .git/                    # Git version control
├── .gitignore               # Git ignore rules
├── node_modules/            # Third-party dependencies
├── next.config.ts           # Next.js configuration
├── package.json             # Project dependencies and scripts
├── package-lock.json        # Lock file for dependencies
├── postcss.config.mjs       # PostCSS configuration
├── public/                  # Static assets
├── README.md                # Project readme
├── DOCUMENTATION.txt        # This documentation file
├── src/                     # Source code
│   ├── app/                 # Next.js App Router
│   │   ├── api/             # API routes
│   │   │   └── deepseek/    # DeepSeek API integration
│   │   │       └── route.ts # API endpoint for DeepSeek
│   │   ├── globals.css      # Global styles
│   │   ├── layout.tsx       # Root layout component
│   │   └── page.tsx         # Home page component
│   └── components/          # React components
│       ├── chat/            # Chat-related components
│       │   ├── AnimatedBackground.module.css
│       │   ├── AnimatedBackground.tsx
│       │   ├── Chat.module.css
│       │   ├── Chat.tsx     # Main chat component
│       │   ├── ChatHeader.module.css
│       │   ├── ChatHeader.tsx
│       │   ├── ChatInput.module.css
│       │   ├── ChatInput.tsx
│       │   ├── ChatMessages.module.css
│       │   └── ChatMessages.tsx
│       ├── loading/         # Loading components
│       ├── theme/           # Theme components
│       └── ClientApp.tsx    # Client-side app wrapper
└── tsconfig.json            # TypeScript configuration

=== KEY COMPONENTS ===

1. Chat.tsx
   - Main chat container component
   - Manages state for messages
   - Handles sending messages and receiving responses
   - Integrates with DeepSeek API through the backend endpoint

2. ChatMessages.tsx
   - Displays the message history
   - Handles message rendering and styling
   - Shows loading animation while waiting for AI response

3. ChatInput.tsx
   - User input component
   - Handles text submission
   - Provides user feedback
   - Disables input during API processing

4. AnimatedBackground.tsx
   - Provides visual aesthetics
   - Creates dynamic background animations

5. ClientApp.tsx
   - Client-side app wrapper 
   - Manages client-side rendering

6. API Route (src/app/api/deepseek/route.ts)
   - Server-side API endpoint that interfaces with DeepSeek
   - Securely handles API key
   - Processes user messages and returns AI responses

=== FEATURES ===

1. Responsive Design
   - Adapts to various screen sizes
   - Mobile-friendly interface

2. Modern UI
   - Animated background
   - Clean, intuitive chat interface
   - Visual feedback for user actions
   - Loading animations during API calls

3. DeepSeek AI Integration
   - Real-time AI responses
   - Secure API key handling
   - Error handling for API failures

4. TypeScript Integration
   - Type-safe development
   - Enhanced code reliability

=== TECHNOLOGIES USED ===

- Next.js 15.2.1: React framework for production
- React 19: UI library
- TypeScript: Type-safe JavaScript
- TailwindCSS: Utility-first CSS framework
- CSS Modules: Component-scoped styling
- UUID: Unique ID generation
- DeepSeek API: AI-powered conversation

=== DEEPSEEK API INTEGRATION ===

The application integrates with DeepSeek AI through a secure server-side API route:

1. API Configuration
   - API key stored in .env.local (NEXT_PUBLIC_DEEPSEEK_API_KEY)
   - Server-side endpoint at /api/deepseek

2. Message Flow
   - User inputs message in ChatInput component
   - Message is sent to backend API route
   - Backend securely calls DeepSeek API
   - Response is returned and displayed in the chat

3. Error Handling
   - API errors are caught and displayed as error messages
   - Loading states provide visual feedback during API calls
   - Network issues are gracefully handled

=== SETUP INSTRUCTIONS ===

1. Environment Setup
   - Ensure Node.js is installed (v18+ recommended)
   - Configure .env.local with DeepSeek API key:
     NEXT_PUBLIC_DEEPSEEK_API_KEY=your-api-key

2. Installation
   - Run `npm install` to install dependencies

3. Development
   - Run `npm run dev` to start the development server
   - Access the application at http://localhost:3000

=== NEXT STEPS ===

1. Enhance DeepSeek API integration with conversation history
2. Add user authentication
3. Implement message persistence with database
4. Add additional UI features like message reactions
5. Implement typing indicators and read receipts

==================================================== 